syntax = "proto2";

enum RAN_message_type{
    SUBSCRIPTION = 1;
    INDICATION_REQUEST = 2;
    INDICATION_RESPONSE = 3;
    CONTROL = 4;
} 

enum RAN_parameter{
    GNB_ID = 1;
    UE_LIST = 2;
    UE_RSRP = 3;           // New parameter: UE_RSRP
    UE_BER_UPLINK = 4;     // New parameter: UE_BER_UPLINK
    UE_BER_DOWNLINK = 5;   // New parameter: UE_BER_DOWNLINK
    UE_MCS_UPLINK = 6;     // New parameter: UE_MCS_UPLINK
    UE_MCS_DOWNLINK = 7;   // New parameter: UE_MCS_DOWNLINK
    CELL_SIZE = 8;
}

message RAN_param_map_entry{
    required RAN_parameter key = 1;
    oneof value{
        int64 int64_value  = 2;
        string string_value = 3;
        ue_list_m ue_list = 4;
        float float_value = 5; // New field for float values
    }
}

/* RAN SUBMESSAGES */
message RAN_indication_request{
    repeated RAN_parameter target_params = 1;
}

message RAN_indication_response{
    repeated RAN_param_map_entry param_map = 1;
}

message RAN_control_request{
    repeated RAN_param_map_entry target_param_map = 1;
}

/* MASTER RAN MESSAGE */

message RAN_message{
    required RAN_message_type msg_type = 1;
    oneof payload{
        RAN_indication_request ran_indication_request = 2;
        RAN_indication_response ran_indication_response = 3;
        RAN_control_request ran_control_request = 4;
    }
}

message ue_info_m{

    // this is to identify the ue
    required int32 rnti=1;

    // specific ue's measurements (these will come from the gnb)
    optional float meas_type_1=2;
    optional float meas_type_2=3;
    optional float meas_type_3=4;

    // specific ue's propoerties (these will be set by the xapp and sent to gnb)
    // additional measurements
    optional float ue_rsrp = 7;
    optional float ue_ber_uplink = 8;
    optional float ue_ber_downlink = 9;
    optional float ue_mcs_uplink = 10;
    optional float ue_mcs_downlink = 11;
    optional int32 cell_size = 12;
}

message ue_list_m{
  required int32 connected_ues = 1;
  repeated ue_info_m ue_info = 2;
}
